{"version":3,"sources":["MainScene.ts","GameScene.ts","PreloadScene.ts","LoadingScene.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["MainScene","this","add","image","setOrigin","start","text","game","canvas","width","height","color","align","setInteractive","on","scene","window","onkeyup","e","keyCode","renderer","snapshot","arg","style","paddingLeft","document","body","appendChild","Phaser","Scene","GameScene","PreloadScene","scale","scaleMode","Scale","ScaleModes","RESIZE","load","LoadingScene","App","app","React","createRef","useEffect","config","type","AUTO","mode","Game","ref","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4MACqBA,E,kDACjB,aAAe,uCACL,Q,qDAEA,IAAD,OACLC,KAAKC,IAAIC,MAAM,EAAG,EAAG,cAAcC,UAAU,GAAK,IAElD,IAAMC,EAAQJ,KAAKC,IAAII,KAAKL,KAAKM,KAAKC,OAAOC,MAAQ,EAAGR,KAAKM,KAAKC,OAAOE,OAAS,EAAG,QAAS,CAAEC,MAAO,OAAQC,MAAO,WAAYR,UAAU,GAAK,IACjJC,EAAMQ,iBACNR,EAAMS,GAAG,aAAa,WAClB,EAAKP,KAAKQ,MAAMV,MAAM,WAG1BW,OAAOC,QAAU,SAACC,GACI,KAAdA,EAAEC,SACF,EAAKZ,KAAKa,SAASC,UAAS,SAACC,GACzB,IAAInB,EAAQmB,EACZnB,EAAMoB,MAAMd,MAAZ,UAAuB,EAAKF,KAAKC,OAAOC,MAAxC,MACAN,EAAMoB,MAAMb,OAAZ,UAAwB,EAAKH,KAAKC,OAAOE,OAAzC,MACAP,EAAMoB,MAAMC,YAAc,MAG1BC,SAASC,KAAKC,YAAYxB,W,GAtBPyB,OAAOC,OCCjCC,EAAb,kDACI,aAAe,uCACL,QAFd,qDAKQ7B,KAAKC,IAAII,KAAK,GAAI,GAAI,YAL9B,GAA+BsB,OAAOC,OCDzBE,EAAb,qKAEQ9B,KAAK+B,MAAMC,UAAYL,OAAOM,MAAMC,WAAWC,SAFvD,gCAKQnC,KAAKoC,KAAKlC,MAAM,SAAU,kBALlC,+BAQQF,KAAKC,IAAIC,MAAM,EAAG,EAAG,UAAUC,UAAU,GAAK,IAC9CH,KAAKM,KAAKQ,MAAMV,MAAM,eAT9B,GAAkCuB,OAAOC,OCD5BS,EAAb,qKAEQrC,KAAK+B,MAAMC,UAAYL,OAAOM,MAAMC,WAAWC,SAFvD,gCAKQnC,KAAKoC,KAAKlC,MAAM,aAAc,uDALtC,+BAQQF,KAAKc,MAAMV,MAAM,YARzB,GAAkCuB,OAAOC,OCyC1BU,EA7BO,WACpB,IAAMC,EAAMC,IAAMC,YAmBlB,OAjBAC,qBAAU,WACR,IAAMC,EAAuC,CAC3CC,KAAMjB,OAAOkB,KACbpC,OAAQ,KACRD,MAAO,KACPuB,MAAO,CACLe,KAAMnB,OAAOM,MAAMC,WAAWC,SAG5B7B,EAAO,IAAIqB,OAAOoB,KAAKJ,GAC7BrC,EAAKQ,MAAMb,IAAI,UAAW6B,GAC1BxB,EAAKQ,MAAMb,IAAI,UAAWoC,GAC1B/B,EAAKQ,MAAMb,IAAI,OAAQF,GACvBO,EAAKQ,MAAMb,IAAI,OAAQ4B,GACvBvB,EAAKQ,MAAMV,MAAM,aAChB,IAGD,yBAAKkB,MAAO,CAAEd,MAAO,SACnB,yBAAKwC,IAAKT,EAAKU,UAAU,UCtBXC,QACW,cAA7BnC,OAAOoC,SAASC,UAEe,UAA7BrC,OAAOoC,SAASC,UAEhBrC,OAAOoC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhC,SAASiC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.f422cc84.chunk.js","sourcesContent":["\r\nexport default class MainScene extends Phaser.Scene {\r\n    constructor() {\r\n        super(\"main\");\r\n    }\r\n    create() {\r\n        this.add.image(0, 0, \"background\").setOrigin(0.5, 0.5);\r\n\r\n        const start = this.add.text(this.game.canvas.width / 2, this.game.canvas.height / 2, 'Start', { color: '#fff', align: \"center\" }).setOrigin(0.5, 0.5);\r\n        start.setInteractive();\r\n        start.on(\"pointerup\", () => {\r\n            this.game.scene.start(\"game\");\r\n        });\r\n\r\n        window.onkeyup = (e: any) => {\r\n            if (e.keyCode === 44) {\r\n                this.game.renderer.snapshot((arg) => {\r\n                    let image = arg as HTMLImageElement;\r\n                    image.style.width = `${this.game.canvas.width}px`;\r\n                    image.style.height = `${this.game.canvas.height}px`;\r\n                    image.style.paddingLeft = '2px';\r\n                    // snapHistory.push(image);\r\n                    // console.log('snap!');\r\n                    document.body.appendChild(image);\r\n                });\r\n            }\r\n        };\r\n    }\r\n}","import { create } from \"domain\"\r\n\r\nexport class GameScene extends Phaser.Scene {\r\n    constructor() {\r\n        super(\"game\");\r\n    }\r\n    create() {\r\n        this.add.text(50, 50, \"Game\");\r\n    }\r\n}","\r\nexport class PreloadScene extends Phaser.Scene {\r\n    init() {\r\n        this.scale.scaleMode = Phaser.Scale.ScaleModes.RESIZE;\r\n    }\r\n    preload() {\r\n        this.load.image(\"splash\", \"./splash.jpg\");\r\n    }\r\n    create() {\r\n        this.add.image(0, 0, \"splash\").setOrigin(0.5, 0.5);\r\n        this.game.scene.start(\"loading\");\r\n    }\r\n}","export class LoadingScene extends Phaser.Scene {\r\n    init() {\r\n        this.scale.scaleMode = Phaser.Scale.ScaleModes.RESIZE;\r\n    }\r\n    preload() {\r\n        this.load.image(\"background\", \"./unsplash/isaac-quesada-1AyqZcC7zSg-unsplash.jpg\");\r\n    }\r\n    create() {\r\n        this.scene.start(\"main\");\r\n    }\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { useEffect } from 'react';\n\nimport \"phaser\";\nimport MainScene from './MainScene';\nimport { MainPage } from './MainPage';\nimport { GameScene } from './GameScene';\nimport { PreloadScene } from './PreloadScene';\nimport { LoadingScene } from './LoadingScene';\n\nconst App: React.FC = () => {\n  const app = React.createRef<HTMLDivElement>();\n\n  useEffect(() => {\n    const config: Phaser.Types.Core.GameConfig = {\n      type: Phaser.AUTO,\n      height: 1080,\n      width: 1920,\n      scale: {\n        mode: Phaser.Scale.ScaleModes.RESIZE,\n      }\n    }\n    const game = new Phaser.Game(config);\n    game.scene.add(\"preload\", PreloadScene);\n    game.scene.add(\"loading\", LoadingScene);\n    game.scene.add(\"main\", MainScene);\n    game.scene.add(\"game\", GameScene);\n    game.scene.start(\"preload\");\n  }, []);\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      <div ref={app} className=\"App\">\n        {/* <MainPage /> */}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}